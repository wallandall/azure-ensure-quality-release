name: Azure Pipelines

stages:
  - stage: 'Provisioning'
    jobs:
      - job: provision_infrastructure
        displayName: 'Provision infrastructure'
        pool:
          vmimage: 'ubuntu-18.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'Download terraform.tfvars file'
            name: tfvars
            inputs:
              secureFile: 'terraform.tfvars'

          - task: Bash@3
            displayName: 'Copy terraform.tfvars file'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                sudo cp $(tfvars.secureFilePath) terraform/environment/test/terraform.tfvars
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '0.14.11'

          - task: TerraformTaskV1@0
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test/'
              backendServiceArm: 'TerraformSP'
              backendAzureRmResourceGroupName: 'tstate'
              backendAzureRmStorageAccountName: 'tstate8176'
              backendAzureRmContainerName: 'tstate'
              backendAzureRmKey: 'terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test/'

          - task: TerraformTaskV1@0
            displayName: 'Terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test/'
              environmentServiceNameAzureRM: 'TerraformSP'

          - task: TerraformTaskV1@0
            displayName: 'Terraform apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test/'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: 'TerraformSP'

  - stage: 'Build'
    jobs:
      - job: build_artifacts
        displayName: 'Build artifacts'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: 'Publish FakeRestAPI'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
              artifactName: 'fakerestapi'

          - task: ArchiveFiles@2
            displayName: 'Archive Selenium'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Selenium'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
              artifactName: 'selenium'

  - stage: 'Deploy'
    jobs:
      - deployment: deploy_fakerestapi
        displayName: 'Deploy FakeRestAPI'
        pool:
          vmImage: 'ubuntu-18.04'
        environment: 'Test'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure WebApp'
                  inputs:
                    azureSubscription: 'TerraformSP'
                    appType: 'webAppLinux'
                    appName: 'wallandall-WebApplication-AppService'
                    package: '$(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip'
                    deploymentMethod: 'auto'

      - deployment: deploy_vm
        displayName: 'Deploy VM'
        environment:
          name: 'Test'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Configure Selenium'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #!/bin/bash
                      export LC_ALL=C
                      sudo apt-get install -y software-properties-common
                      sudo apt-add-repository -y universe
                      sudo apt-add-repository -y ppa:deadsnakes/ppa
                      sudo apt-get -y update
                      sudo apt-get install -y python3.8 python3.8-distutils python3-pip unzip chromium-browser chromium-chromedriver
                      sudo rm /usr/bin/python3
                      sudo ln -s /usr/bin/python3.8 /usr/bin/python3
                      sudo apt remove -y python3-pip
                      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                      sudo python3 get-pip.py
                      sudo pip3 install --upgrade pip
                      sudo pip3 install selenium
  - stage: 'Test'
    jobs:
      - job: test_postman
        displayName: 'Deploy and run Postman tests'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '14.x'
              checkLatest: true

          - task: Bash@3
            displayName: 'Install Newman'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                npm install -g newman
                mkdir -p output/newman/
          - task: Bash@3
            displayName: 'Run regression tests'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                newman run automatedtesting/postman/TestRestAPI_Regression.postman_collection.json \
                  --environment automatedtesting/postman/TestEnv.postman_environment.json \
                  --suppress-exit-code \
                  --delay-request 5000 \
                  --reporters cli,junit --reporter-junit-export output/newman/regression.xml
          - task: Bash@3
            displayName: 'Run validation tests'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                newman run automatedtesting/postman/TestRestAPI_Validation.postman_collection.json \
                 --environment automatedtesting/postman/TestEnv.postman_environment.json \
                  --suppress-exit-code \
                  --delay-request 5000 \
                  --reporters cli,junit --reporter-junit-export output/newman/validation.xml
          - task: PublishTestResults@2
            displayName: 'Publish regression and validation test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/output/newman/'
              mergeTestResults: true
              testRunTitle: 'Regression and validation test results'

      - deployment: test_selenium
        displayName: 'Deploy and run Selenium tests'
        environment:
          name: 'Test'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Run Selenium tests'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #!/bin/bash
                      cd $(Pipeline.Workspace)/selenium
                      find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete
                      unzip -o selenium-$(Build.BuildId).zip
                      sudo mkdir -p /var/log/selenium
                      sudo chmod 777 /var/log/selenium
                      sudo python3 -u test-suite.py 2>&1 | sudo tee -a '/var/log/selenium/selenium-test-$(Build.BuildId).log'
                      cd $(System.DefaultWorkingDirectory)
                      mkdir -p log/selenium
                      sudo cp '/var/log/selenium/selenium-test-$(Build.BuildId).log' 'log/selenium/selenium-test-$(Build.BuildId).log'
                - task: PublishPipelineArtifact@1
                  displayName: 'Publish Selenium logs'
                  inputs:
                    targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test-$(Build.BuildId).log'
                    artifactName: 'selenium-logs'

      - job: test_jmeter
        displayName: 'Deploy and run JMeter tests'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - task: Bash@3
            displayName: 'Install JMeter'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                sudo apt-get install -y openjdk-11-jre-headless
                wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.4.1.tgz
                tar xzvf apache-jmeter-5.4.1.tgz
                mkdir -p log/jmeter
                apache-jmeter-5.4.1/bin/jmeter --version
          - task: Bash@3
            displayName: 'Run JMeter stress test'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx \
                  -l log/jmeter/stress-test-result.csv \
                  -e -f -o log/jmeter/stress-test-report.html \
                  -j log/jmeter/jmeter-stress-test.log
          - task: Bash@3
            displayName: 'Run JMeter endurance test'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx \
                  -l log/jmeter/endurance-test-result.csv \
                  -e -f -o log/jmeter/endurance-test-report.html \
                  -j log/jmeter/jmeter-endurance-test.log
          - task: ArchiveFiles@2
            displayName: 'Archive JMeter stress test HTML report'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-report.html'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
              verbose: true

          - task: ArchiveFiles@2
            displayName: 'Archive JMeter endurance test HTML report'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-report.html'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
              verbose: true

          - task: Bash@3
            displayName: 'Clean up logs'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                rm -rf log/jmeter/stress-test-report.html
          - task: PublishPipelineArtifact@1
            displayName: 'Publish JMeter logs'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'jmeter-logs'
